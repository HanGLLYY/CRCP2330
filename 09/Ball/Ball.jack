// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical Ball. */
class Ball {

   field int x, y; // screen location of the square's top-left corner
   field int size; // length of this square, in pixels

   /** Constructs a new square with a given location and size. */
   constructor Ball new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      do draw();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawCircle(x + size, y + size, size);
      return;
   }

   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + getS(), y + getS());
      return;
   }

    /** Increments the square size by 2 pixels. */
   method void incSize() {
      if (((y + getS()) < 254) & ((x + getS()) < 510)) {
         do erase();
         let size = size + 1;
         do draw();
      }
      return;
   }

   /** Decrements the square size by 2 pixels. */
   method void decSize() {
      if (size > 1) {
         do erase();
         let size = size - 1;
         do draw();
      }
      return;
   }

   /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + getS(), y + getS());
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawCircle(x+size, y+size, size);
      }
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if ((y + getS()) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + getS(), y + getS());
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawCircle(x+size, y+size, size);
      }
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + getS(), y + getS());
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawCircle(x+size, y+size, size);
      }
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if ((x + getS()) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + getS(), y + getS());
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawCircle(x+size, y+size, size);
      }
      return;
   }
   
   method int getX() { return x; }
   method int getY() { return y; }
   method int getS() { return size + size; }

}
