// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class BallGame {
   field Ball ball; // the ball of this game
   field int dx; // the ball's current x direction: 
   field int dy; // the ball's current y direction: 

   /** Constructs a new Square Game. */
   constructor BallGame new() {
      // Creates a 30 by 30 pixels ball and positions it at the top-left
      // of the screen.
      let ball = Ball.new(0, 0, 15);
      let dx = 0;
      let dy = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do ball.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the ball in the current direction. */
   method void moveBall() {
      if (dx = 0) { if (dy = 0) { return; } }
      if (ball.getX() + ball.getS() + 2 > 510) { let dx = -1; do ball.incSize(); }
      if (ball.getX() < 2) { let dx = 1; do ball.incSize(); }
      if (ball.getY() + ball.getS() + 2 > 254) { let dy = -1; do ball.incSize(); }
      if (ball.getY() < 2) { let dy = 1; do ball.incSize(); }
      if (dy = 1) { do ball.moveDown(); }
      if (dy = -1) { do ball.moveUp(); }
      if (dx = 1) { do ball.moveRight(); }
      if (dx = -1) { do ball.moveLeft(); }
      do Sys.wait(12);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the ball accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveBall();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 90)  { do ball.decSize(); } // z key
         if (key = 88)  { do ball.incSize(); } // x key
         if (key = 32)  { if (dx = 0) { let dx = 1; let dy = 1; }}

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveBall();
         }
     } // while
     return;
   }
}



